<?php

/**
 * crpCalendar
 *
 * @copyright (c) 2007,2009 Daniele Conca
 * @link http://code.zikula.org/crpcalendar Support and documentation
 * @author Daniele Conca <conca.daniele@gmail.com>
 * @license GNU/GPL - v.2.1
 * @package crpCalendar
 */

/**
 * crpCalendarUI, User Interface class for crpCalendar
 */
class crpCalendarUI
{

	/**
	 * constructor, set values
	 */
	function crpCalendarUI()
	{
		// none
		$this->theme_options = array (
			'default' => 'default',
			'tan' => 'tan',
			'grey' => 'grey',
			'green' => 'green'
		);

		switch (pnModgetVar('crpCalendar', 'crpcalendar_weekday_start'))
		{
			case "1" :
				$this->day_of_week_short = array (
					__('Mo', $this->dom),
					__('Th', $this->dom),
					__('We', $this->dom),
					__('Tu', $this->dom),
					__('Fr', $this->dom),
					__('Sa', $this->dom),
					__('Su', $this->dom)
				);
				break;
			default :
				$this->day_of_week_short = array (
					__('Su', $this->dom),
					__('Mo', $this->dom),
					__('Th', $this->dom),
					__('We', $this->dom),
					__('Tu', $this->dom),
					__('Fr', $this->dom),
					__('Sa', $this->dom)
				);
				break;
		}
	}

	/**
	 * draw events administration list
	 *
	 * @param array $rows of event's value
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param int $active specified status
	 *
	 * @return string html code
	 */
	function adminList($rows = array (), $category = null, $mainCat = null, $modvars = array (), $active = null, $sortColumn = 'start_date', $sortOrder = 'DESC')
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar', false);

		// Assign the items to the template
		$render->assign('events', $rows);
		$render->assign('events_category', $category);
		$render->assign('mainCategory', $mainCat);
		$render->assign($modvars);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign('events_status', $active);
		$render->assign('sortColumn', $sortColumn);
		$render->assign('sortOrder', $sortOrder);

		// Assign the information required to create the pager
		$render->assign('pager', array (
			'numitems' => pnModAPIFunc('crpCalendar', 'user', 'countitems', array (
				'category' => $category,
				'active' => $active
			)),
			'itemsperpage' => $modvars['itemsperpage']
		));

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_admin_view.htm');
	}

	/**
	 * draw user events list
	 *
	 * @param array $rows of event's value
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param string $typeList upcoming/archive
	 *
	 * @return string html code
	 */
	function userList($rows = array (), $startnum = 1, $category = null, $mainCat = null, $modvars = array (), $typeList = null)
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// For caching reasons you must pass a cache ID
		$render->cache_id = $typeList . '|' . $startnum. '|' . $category;

		// check out if the contents are cached.
		if ($render->is_cached('crpcalendar_user_view.htm'))
		{
			return $render->fetch('crpcalendar_user_view.htm');
		}

		// Assign the items to the template
		$render->assign('events', $rows);
		$render->assign('events_category', $category);
		$render->assign('mainCategory', $mainCat);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);
		$render->assign('typeList', $typeList);

		// Assign the information required to create the pager
		$render->assign('pager', array (
			'numitems' => pnModAPIFunc('crpCalendar', 'user', 'countitems', array (
				'category' => $category,
				'active' => 'A',
				'typeList' => $typeList
			)),
			'itemsperpage' => $modvars['itemsperpage']
		));

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_user_view.htm');
	}

	/**
	 * draw user events list
	 *
	 * @param array $rows of event's value
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param int $t timestamp
	 * @param array $date year,month,day values
	 *
	 * @return string html code
	 */
	function userYearList($rows = array (), $category = null, $mainCat = null, $modvars = array (), $t = null, $date = null)
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// For caching reasons you must pass a cache ID
		$render->cache_id = DateUtil :: getDatetime($t, '%Y') . '|' . $category;

		// check out if the contents are cached.
		if ($render->is_cached('crpcalendar_user_view_year.htm'))
		{
			return $render->fetch('crpcalendar_user_view_year.htm');
		}

		// Assign the items to the template
		$render->assign('events', $rows);
		$render->assign('events_category', $category);
		$render->assign('mainCategory', $mainCat);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);
		$render->assign('t', $t);
		$render->assign('date', $date);

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_user_view_year.htm');
	}

	/**
	 * draw user events list
	 *
	 * @param array $rows of event's value
	 * @param int $uid user identifier
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 *
	 * @return string html code
	 */
	function userPartecipations($rows = array (), $uid = null, $category = null, $mainCat = null, $modvars = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// For caching reasons you must pass a cache ID
		$render->cache_id = $uid . '|' . $category;

		// check out if the contents are cached.
		if ($render->is_cached('crpcalendar_user_view_partecipations.htm'))
		{
			return $render->fetch('crpcalendar_user_view_partecipations.htm');
		}

		// Assign the items to the template
		$render->assign('events', $rows);
		$render->assign('uid', $uid);
		$render->assign('events_category', $category);
		$render->assign('mainCategory', $mainCat);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);
		$render->assign('user_avatar', pnUserGetVar('_YOURAVATAR', $uid));

		// Assign the information required to create the pager
		$render->assign('pager', array (
			'numitems' => pnModAPIFunc('crpCalendar', 'user', 'countitems', array (
				'category' => $category,
				'active' => 'A',
				'uid' => $uid
			)),
			'itemsperpage' => $modvars['itemsperpage']
		));

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_user_view_partecipations.htm');
	}

	/**
	 * draw user events list
	 *
	 * @param array $rows of event's value
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 *
	 * @return string html code
	 */
	function attendeesList($rows = array (), $category = null, $mainCat = null, $modvars = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// For caching reasons you must pass a cache ID
		$render->cache_id = $category;

		// check out if the contents are cached.
		if ($render->is_cached('crpcalendar_user_view_attendees.htm'))
		{
			return $render->fetch('crpcalendar_user_view_attendees.htm');
		}

		// Assign the items to the template
		$render->assign('users', $rows);
		$render->assign('events_category', $category);
		$render->assign('mainCategory', $mainCat);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);
		/* TODO : 9999 -> $navigationValues['modvars'] to be changed when Zikula ticket #49 is resolved
		$render->assign('pager', array (
			'numitems' => pnModAPIFunc('crpCalendar',
			'user',
			'countitems_attendance',
			array (
				'category' => $category,
				'active' => 'A',
				'eventid' => true
			)
		), 'itemsperpage' => $modvars['itemsperpage']));
		*/
		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_user_view_attendees.htm');
	}

	/**
	 * draw user month events list
	 *
	 * @param array $items of event's value
	 * @param array $days of week's month dates
	 * @param array $daysexpanded out of week's month dates
	 * @param int $t timestamp
	 * @param array $date year,month,day values
	 * @param datetime $startDate init
	 * @param datetime $endDate end
	 * @param datetime $today for layout purpose
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param string $viewForm visualization
	 *
	 * @return string html code
	 */
	function userMonthList($items = array (), $days = array (), $daysexpanded = array (), $t = null, $date = null, $startDate = null, $endDate = null, $today = null, $category = null, $mainCat = null, $modvars = array (), $viewForm = 'table')
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// For caching reasons you must pass a cache ID
		$render->cache_id = $viewForm . '|' . DateUtil :: getDatetime($t, '%b') . '|' . $category;

		// check out if the contents are cached.
		switch ($viewForm)
		{
			case 'list' :
				if ($render->is_cached('crpcalendar_user_view_month.htm'))
					return $render->fetch('crpcalendar_user_view_month.htm');
				break;
			case 'table' :
			default :
				if ($render->is_cached('crpcalendar_user_monthlist.htm'))
					return $render->fetch('crpcalendar_user_monthlist.htm');
				break;
		}

		// Assign the items to the template
		$render->assign('events', $items);
		$render->assign('days', $days);
		$render->assign('daysexpanded', $daysexpanded);
		$render->assign('t', $t);
		$render->assign('todayEv', $today);
		$render->assign('date', $date);
		$render->assign('events_category', $category);
		$render->assign('mainCategory', $mainCat);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);
		$render->assign('viewForm', $viewForm);

		$render->assign('day_of_week_short', $this->day_of_week_short);

		// Return the output that has been generated by this function
		switch ($viewForm)
		{
			case 'list' :
				return $render->fetch('crpcalendar_user_view_month.htm');
				break;
			case 'table' :
			default :
				return $render->fetch('crpcalendar_user_monthlist.htm');
				break;
		}
	}

	/**
	 * draw user week events list
	 *
	 * @param array $items of event's value
	 * @param array $days of week's month dates
	 * @param array $daysexpanded out of week's month dates
	 * @param int $t timestamp
	 * @param array $date year,month,day values
	 * @param datetime $startDate init
	 * @param datetime $endDate end
	 * @param datetime $today for layout purpose
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param string $viewForm visualization
	 *
	 * @return string html code
	 */
	function userWeekList($items = array (), $days = array (), $daysexpanded = array (), $t = null, $date = null, $startDate = null, $endDate = null, $today = null, $category = null, $mainCat = null, $modvars = array (), $viewForm = 'table')
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// For caching reasons you must pass a cache ID
		$render->cache_id = $viewForm . '|' . DateUtil :: getDatetime($t, '%U') . '|' . $category;

		// check out if the contents are cached.
		if ($render->is_cached('crpcalendar_user_weeklist.htm'))
		{
			return $render->fetch('crpcalendar_user_weeklist.htm');
		}

		// Assign the items to the template
		$render->assign('events', $items);
		$render->assign('days', $days);
		$render->assign('daysexpanded', $daysexpanded);
		$render->assign('t', $t);
		$render->assign('date', $date);
		$render->assign('todayEv', $today);
		$render->assign('events_category', $category);
		$render->assign('mainCategory', $mainCat);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);

		$render->assign('day_of_week_short', $this->day_of_week_short);

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_user_weeklist.htm');
	}

	/**
	 * draw user day events list
	 *
	 * @param array $items of event's value
   * @param int $startnum page first item counter
   * @param int $numitems total viewable items
	 * @param array $day to display
	 * @param int $t timestamp
	 * @param array $date year,month,day values
	 * @param datetime $startDate init
	 * @param datetime $endDate end
	 * @param datetime $today for layout purpose
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 *
	 * @return string html code
	 */
	function userDayList($items = array (), $startnum=1, $day = null, $t = null, $date = null, $startDate = null, $endDate = null, $today = null, $category = null, $mainCat = null, $modvars = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// For caching reasons you must pass a cache ID
		$render->cache_id = DateUtil :: getDatetime($t, '%Y%m%d') . '|' . $category . '|' . $startnum;

		// check out if the contents are cached.
		if ($render->is_cached('crpcalendar_user_daylist.htm'))
		{
			return $render->fetch('crpcalendar_user_daylist.htm');
		}

		// Assign the items to the template
		$render->assign('events', $items);
		$render->assign('day', $day);
		$render->assign('t', $t);
		$render->assign('date', $date);
		$render->assign('todayEv', $today);
		$render->assign('events_category', $category);
		$render->assign('mainCategory', $mainCat);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);

		$render->assign('day_of_week_short', $this->day_of_week_short);

    if (!$modvars['daylist_categorized'])
		{
      // Assign the information required to create the pager
      $render->assign('pager', array (
        'numitems' => pnModAPIFunc('crpCalendar', 'user', 'countitems', array (
          'category' => $category,
          'active' => 'A',
          'startDate' => $startDate,
          'endDate' => $endDate
        )),
        'itemsperpage' => $modvars['itemsperpage']
      ));
    }
		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_user_daylist.htm');
	}

	/**
	 * draw single event page
	 *
	 * @param int $eventid identifier
	 * @param array $item of event's value
	 * @param int $category current category if specified
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 *
	 * @return string html code
	 */
	function userDisplay($eventid = null, $item = array (), $modvars = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// determine which template to render this page with
		// A specific template may exist for this page (based on page id)
		if ($render->template_exists("crpcalendar_user_display_$eventid"))
		{
			$template = "crpcalendar_user_display_$eventid";
		}
		else
		{
			$template = 'crpcalendar_user_display.htm';
		}

		// For caching reasons you must pass a cache ID
		$render->cache_id = $eventid ;

		// check out if the contents are cached.
		if ($render->is_cached($template))
		{
			return $render->fetch($template);
		}

		// Assign the items to the template
		$render->assign('event', $item);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);

		// Return the output that has been generated by this function
		return $render->fetch($template);
	}

	/**
	 * draw single event page for Content module
	 *
	 * @param int $eventid identifier
	 * @param array $item of event's value
	 * @param array $modvars module's variables
	 *
	 * @return string html code
	 */
	function userSimpleDisplay($eventid = null, $item = array (), $modvars = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar');

		// determine which template to render this page with
		// A specific template may exist for this page (based on page id)
		if ($render->template_exists("crpcalendar_user_simple_display_$eventid"))
		{
			$template = "crpcalendar_user_simple_display_$eventid";
		}
		else
		{
			$template = 'crpcalendar_user_simple_display.htm';
		}

		// For caching reasons you must pass a cache ID
		$render->cache_id = $eventid ;

		// check out if the contents are cached.
		if ($render->is_cached($template))
		{
			return $render->fetch($template);
		}

		// Assign the items to the template
		$render->assign('event', $item);
		$render->assign('lang', ZLanguage::getLanguageCode());
		$render->assign($modvars);

		// Return the output that has been generated by this function
		return $render->fetch($template);
	}

	/**
	 * draw creation form
	 *
	 * @param array $item of event's value
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param array $avail available locations
	 *
	 * @return string html
	 */
	function newEvent($item = array (), $mainCat, $modvars, $avail = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar', false);

		$render->assign('mainCategory', $mainCat);
		$render->assign($modvars);
		$render->assign($item);
		$render->assign('avail', $avail);

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_admin_new.htm');
	}

	/**
	 * draw user creation form
	 *
	 * @param array $item of event's value
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param array $avail available locations
	 *
	 * @return string html
	 */
	function submitEvent($item = array (), $mainCat, $modvars, $avail = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar', false);

		$render->assign('mainCategory', $mainCat);
		$render->assign($modvars);
		$render->assign($item);
		$render->assign('avail', $avail);

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_user_new.htm');
	}

	/**
	 * draw modify form
	 *
	 * @param array $item of event's value
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param array $avail available locations
	 *
	 * @return string html
	 */
	function modifyEvent($item, $mainCat, $modvars, $avail = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar', false);

		$render->assign('mainCategory', $mainCat);
		$render->assign($modvars);

		if (SecurityUtil :: checkPermission("crpCalendar::", "$item[cr_uid]:$item[title]:$item[eventid]", ACCESS_DELETE))
		{
			$deletelink = array (
				'url' => pnModURL('crpCalendar', 'admin', 'delete', array (
					'eventid' => $item['eventid']
				)),
				'image' => 'editdelete.gif',
				'title' => _DELETE
			);

			$render->assign('deletelink', $deletelink);
		}

		// assign the item to the template
		$render->assign('eventid', $item['eventid']);
		$render->assign($item);
		$render->assign('avail', $avail);

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_admin_modify.htm');
	}

	/**
	 * draw modify form
	 *
	 * @param array $item of event's value
	 * @param int $mainCat module root category
	 * @param array $modvars module's variables
	 * @param array $avail available locations
	 *
	 * @return string html
	 */
	function editEvent($item, $mainCat, $modvars, $avail = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar', false);

		$render->assign('mainCategory', $mainCat);
		$render->assign($modvars);

		// assign the item to the template
		$render->assign('eventid', $item['eventid']);
		$render->assign($item);
		$render->assign('avail', $avail);

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_user_edit.htm');
	}

	/**
	 * draw delete form
	 *
	 * @param int $eventid item identifier
	 *
	 * @return string html
	 */
	function deleteEvent($eventid)
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar', false);

		// assign the item to the template
		$render->assign('eventid', $eventid);

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_admin_delete.htm');
	}

	/**
	 * draw modify configuration form
	 *
	 * @param array $gdArray gd library info
	 * @param array $modvars module's variables
	 *
	 * @return string html
	 */
	function modifyConfig($modvars = array (), $gdArray = array ())
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar', false);

		$render->assign($modvars);
		$render->assign('theme_options', $this->theme_options);
		$render->assign('gd_version', $this->gd_version($gdArray['GD Version']));

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_admin_modifyconfig.htm');
	}

	/**
	 * draw rss feed
	 *
	 * @param array $data feed values
	 * @param array $list elements
	 *
	 * @return string xml
	 */
	function drawFeed($data, $list, $modvars = array ())
	{
		$render = &pnRender :: getInstance('crpCalendar', false);
		$render->assign('data', $data);
		$render->assign('list', $list);
		$render->assign($modvars);

		return $render->fetch('crpcalendar_user_getfeed.htm');
	}

	/**
	 * draw ical event export
	 *
	 * @param array $data event values
	 *
	 * @return string html
	 */
	function drawICal($data = array ())
	{
		$render = &pnRender :: getInstance('crpCalendar', false);
		$render->assign('data', $data);

		return $render->fetch('ical/crpcalendar_user_getical.htm');
	}

	/**
	 * draw ical header export
	 *
	 * @param string $selfurl return url
	 *
	 * @return string html
	 */
	function drawICalHeader($selfurl = null)
	{
		$render = &pnRender :: getInstance('crpCalendar', false);
		$render->assign('selfurl', $selfurl);

		return $render->fetch('ical/crpcalendar_user_ical_header.htm');
	}

	/**
	 * draw ical footer export
	 *
	 * @return string html
	 */
	function drawICalFooter()
	{
		$render = &pnRender :: getInstance('crpCalendar', false);

		return $render->fetch('ical/crpcalendar_user_ical_footer.htm');
	}

	/**
	 * calculate gd library information
	 *
	 * @return array gd library info
	 */
	function gd_version($fullstring = null)
	{
		$cache_gd_version = array ();

		if (eregi('bundled \((.+)\)$', $fullstring, $matches))
		{
			$cache_gd_version['string'] = $fullstring; // e.g. "bundled (2.0.15 compatible)"
			$cache_gd_version['value'] = (float) $matches[1]; // e.g. "2.0" (not "bundled (2.0.15 compatible)")
		}
		else
		{
			$cache_gd_version['string'] = $fullstring; // e.g. "1.6.2 or higher"
			$cache_gd_version['value'] = (float) substr($fullstring, 0, 3); // e.g. "1.6" (not "1.6.2 or higher")
		}

		return $cache_gd_version;
	}

	/**
	 * draw import ical form
	 *
	 * @return string html
	 */
	function drawImportForm($mainCat)
	{
		$render = &pnRender :: getInstance('crpCalendar', false);

		$render->assign('mainCategory', $mainCat);

		return $render->fetch('ical/crpcalendar_admin_import_ics.htm');
	}

	/**
	 * draw purge form
	 *
	 * @return string html
	 */
	function drawPurgeEvents()
	{
		// Create output object
		$render = &pnRender :: getInstance('crpCalendar', false);

		// Return the output that has been generated by this function
		return $render->fetch('crpcalendar_admin_purge.htm');
	}

}